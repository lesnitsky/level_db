// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// Bindings to LevelDB

import 'dart:ffi' as ffi;

class LevelDB {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LevelDB(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LevelDB.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<leveldb_t> leveldb_open(
    ffi.Pointer<leveldb_options_t> options,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
  ) {
    return _leveldb_open(
      options,
      name,
      errptr,
    );
  }

  late final _leveldb_open_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_open>>('leveldb_open');
  late final _dart_leveldb_open _leveldb_open =
      _leveldb_open_ptr.asFunction<_dart_leveldb_open>();

  void leveldb_close(
    ffi.Pointer<leveldb_t> db,
  ) {
    return _leveldb_close(
      db,
    );
  }

  late final _leveldb_close_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_close>>('leveldb_close');
  late final _dart_leveldb_close _leveldb_close =
      _leveldb_close_ptr.asFunction<_dart_leveldb_close>();

  void leveldb_put(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<leveldb_writeoptions_t> options,
    ffi.Pointer<ffi.Int8> key,
    int keylen,
    ffi.Pointer<ffi.Int8> val,
    int vallen,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
  ) {
    return _leveldb_put(
      db,
      options,
      key,
      keylen,
      val,
      vallen,
      errptr,
    );
  }

  late final _leveldb_put_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_put>>('leveldb_put');
  late final _dart_leveldb_put _leveldb_put =
      _leveldb_put_ptr.asFunction<_dart_leveldb_put>();

  void leveldb_delete(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<leveldb_writeoptions_t> options,
    ffi.Pointer<ffi.Int8> key,
    int keylen,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
  ) {
    return _leveldb_delete(
      db,
      options,
      key,
      keylen,
      errptr,
    );
  }

  late final _leveldb_delete_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_delete>>('leveldb_delete');
  late final _dart_leveldb_delete _leveldb_delete =
      _leveldb_delete_ptr.asFunction<_dart_leveldb_delete>();

  void leveldb_write(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<leveldb_writeoptions_t> options,
    ffi.Pointer<leveldb_writebatch_t> batch,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
  ) {
    return _leveldb_write(
      db,
      options,
      batch,
      errptr,
    );
  }

  late final _leveldb_write_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_write>>('leveldb_write');
  late final _dart_leveldb_write _leveldb_write =
      _leveldb_write_ptr.asFunction<_dart_leveldb_write>();

  ffi.Pointer<ffi.Int8> leveldb_get(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<leveldb_readoptions_t> options,
    ffi.Pointer<ffi.Int8> key,
    int keylen,
    ffi.Pointer<ffi.Uint64> vallen,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
  ) {
    return _leveldb_get(
      db,
      options,
      key,
      keylen,
      vallen,
      errptr,
    );
  }

  late final _leveldb_get_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_get>>('leveldb_get');
  late final _dart_leveldb_get _leveldb_get =
      _leveldb_get_ptr.asFunction<_dart_leveldb_get>();

  ffi.Pointer<leveldb_iterator_t> leveldb_create_iterator(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<leveldb_readoptions_t> options,
  ) {
    return _leveldb_create_iterator(
      db,
      options,
    );
  }

  late final _leveldb_create_iterator_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_create_iterator>>(
          'leveldb_create_iterator');
  late final _dart_leveldb_create_iterator _leveldb_create_iterator =
      _leveldb_create_iterator_ptr.asFunction<_dart_leveldb_create_iterator>();

  ffi.Pointer<leveldb_snapshot_t> leveldb_create_snapshot(
    ffi.Pointer<leveldb_t> db,
  ) {
    return _leveldb_create_snapshot(
      db,
    );
  }

  late final _leveldb_create_snapshot_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_create_snapshot>>(
          'leveldb_create_snapshot');
  late final _dart_leveldb_create_snapshot _leveldb_create_snapshot =
      _leveldb_create_snapshot_ptr.asFunction<_dart_leveldb_create_snapshot>();

  void leveldb_release_snapshot(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<leveldb_snapshot_t> snapshot,
  ) {
    return _leveldb_release_snapshot(
      db,
      snapshot,
    );
  }

  late final _leveldb_release_snapshot_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_release_snapshot>>(
          'leveldb_release_snapshot');
  late final _dart_leveldb_release_snapshot _leveldb_release_snapshot =
      _leveldb_release_snapshot_ptr
          .asFunction<_dart_leveldb_release_snapshot>();

  ffi.Pointer<ffi.Int8> leveldb_property_value(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<ffi.Int8> propname,
  ) {
    return _leveldb_property_value(
      db,
      propname,
    );
  }

  late final _leveldb_property_value_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_property_value>>(
          'leveldb_property_value');
  late final _dart_leveldb_property_value _leveldb_property_value =
      _leveldb_property_value_ptr.asFunction<_dart_leveldb_property_value>();

  void leveldb_approximate_sizes(
    ffi.Pointer<leveldb_t> db,
    int num_ranges,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> range_start_key,
    ffi.Pointer<ffi.Uint64> range_start_key_len,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> range_limit_key,
    ffi.Pointer<ffi.Uint64> range_limit_key_len,
    ffi.Pointer<ffi.Uint64> sizes,
  ) {
    return _leveldb_approximate_sizes(
      db,
      num_ranges,
      range_start_key,
      range_start_key_len,
      range_limit_key,
      range_limit_key_len,
      sizes,
    );
  }

  late final _leveldb_approximate_sizes_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_approximate_sizes>>(
          'leveldb_approximate_sizes');
  late final _dart_leveldb_approximate_sizes _leveldb_approximate_sizes =
      _leveldb_approximate_sizes_ptr
          .asFunction<_dart_leveldb_approximate_sizes>();

  void leveldb_compact_range(
    ffi.Pointer<leveldb_t> db,
    ffi.Pointer<ffi.Int8> start_key,
    int start_key_len,
    ffi.Pointer<ffi.Int8> limit_key,
    int limit_key_len,
  ) {
    return _leveldb_compact_range(
      db,
      start_key,
      start_key_len,
      limit_key,
      limit_key_len,
    );
  }

  late final _leveldb_compact_range_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_compact_range>>(
          'leveldb_compact_range');
  late final _dart_leveldb_compact_range _leveldb_compact_range =
      _leveldb_compact_range_ptr.asFunction<_dart_leveldb_compact_range>();

  void leveldb_destroy_db(
    ffi.Pointer<leveldb_options_t> options,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
  ) {
    return _leveldb_destroy_db(
      options,
      name,
      errptr,
    );
  }

  late final _leveldb_destroy_db_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_destroy_db>>('leveldb_destroy_db');
  late final _dart_leveldb_destroy_db _leveldb_destroy_db =
      _leveldb_destroy_db_ptr.asFunction<_dart_leveldb_destroy_db>();

  void leveldb_repair_db(
    ffi.Pointer<leveldb_options_t> options,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
  ) {
    return _leveldb_repair_db(
      options,
      name,
      errptr,
    );
  }

  late final _leveldb_repair_db_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_repair_db>>('leveldb_repair_db');
  late final _dart_leveldb_repair_db _leveldb_repair_db =
      _leveldb_repair_db_ptr.asFunction<_dart_leveldb_repair_db>();

  void leveldb_iter_destroy(
    ffi.Pointer<leveldb_iterator_t> arg0,
  ) {
    return _leveldb_iter_destroy(
      arg0,
    );
  }

  late final _leveldb_iter_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_iter_destroy>>(
          'leveldb_iter_destroy');
  late final _dart_leveldb_iter_destroy _leveldb_iter_destroy =
      _leveldb_iter_destroy_ptr.asFunction<_dart_leveldb_iter_destroy>();

  int leveldb_iter_valid(
    ffi.Pointer<leveldb_iterator_t> arg0,
  ) {
    return _leveldb_iter_valid(
      arg0,
    );
  }

  late final _leveldb_iter_valid_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_iter_valid>>('leveldb_iter_valid');
  late final _dart_leveldb_iter_valid _leveldb_iter_valid =
      _leveldb_iter_valid_ptr.asFunction<_dart_leveldb_iter_valid>();

  void leveldb_iter_seek_to_first(
    ffi.Pointer<leveldb_iterator_t> arg0,
  ) {
    return _leveldb_iter_seek_to_first(
      arg0,
    );
  }

  late final _leveldb_iter_seek_to_first_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_iter_seek_to_first>>(
          'leveldb_iter_seek_to_first');
  late final _dart_leveldb_iter_seek_to_first _leveldb_iter_seek_to_first =
      _leveldb_iter_seek_to_first_ptr
          .asFunction<_dart_leveldb_iter_seek_to_first>();

  void leveldb_iter_seek_to_last(
    ffi.Pointer<leveldb_iterator_t> arg0,
  ) {
    return _leveldb_iter_seek_to_last(
      arg0,
    );
  }

  late final _leveldb_iter_seek_to_last_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_iter_seek_to_last>>(
          'leveldb_iter_seek_to_last');
  late final _dart_leveldb_iter_seek_to_last _leveldb_iter_seek_to_last =
      _leveldb_iter_seek_to_last_ptr
          .asFunction<_dart_leveldb_iter_seek_to_last>();

  void leveldb_iter_seek(
    ffi.Pointer<leveldb_iterator_t> arg0,
    ffi.Pointer<ffi.Int8> k,
    int klen,
  ) {
    return _leveldb_iter_seek(
      arg0,
      k,
      klen,
    );
  }

  late final _leveldb_iter_seek_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_iter_seek>>('leveldb_iter_seek');
  late final _dart_leveldb_iter_seek _leveldb_iter_seek =
      _leveldb_iter_seek_ptr.asFunction<_dart_leveldb_iter_seek>();

  void leveldb_iter_next(
    ffi.Pointer<leveldb_iterator_t> arg0,
  ) {
    return _leveldb_iter_next(
      arg0,
    );
  }

  late final _leveldb_iter_next_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_iter_next>>('leveldb_iter_next');
  late final _dart_leveldb_iter_next _leveldb_iter_next =
      _leveldb_iter_next_ptr.asFunction<_dart_leveldb_iter_next>();

  void leveldb_iter_prev(
    ffi.Pointer<leveldb_iterator_t> arg0,
  ) {
    return _leveldb_iter_prev(
      arg0,
    );
  }

  late final _leveldb_iter_prev_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_iter_prev>>('leveldb_iter_prev');
  late final _dart_leveldb_iter_prev _leveldb_iter_prev =
      _leveldb_iter_prev_ptr.asFunction<_dart_leveldb_iter_prev>();

  ffi.Pointer<ffi.Int8> leveldb_iter_key(
    ffi.Pointer<leveldb_iterator_t> arg0,
    ffi.Pointer<ffi.Uint64> klen,
  ) {
    return _leveldb_iter_key(
      arg0,
      klen,
    );
  }

  late final _leveldb_iter_key_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_iter_key>>('leveldb_iter_key');
  late final _dart_leveldb_iter_key _leveldb_iter_key =
      _leveldb_iter_key_ptr.asFunction<_dart_leveldb_iter_key>();

  ffi.Pointer<ffi.Int8> leveldb_iter_value(
    ffi.Pointer<leveldb_iterator_t> arg0,
    ffi.Pointer<ffi.Uint64> vlen,
  ) {
    return _leveldb_iter_value(
      arg0,
      vlen,
    );
  }

  late final _leveldb_iter_value_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_iter_value>>('leveldb_iter_value');
  late final _dart_leveldb_iter_value _leveldb_iter_value =
      _leveldb_iter_value_ptr.asFunction<_dart_leveldb_iter_value>();

  void leveldb_iter_get_error(
    ffi.Pointer<leveldb_iterator_t> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
  ) {
    return _leveldb_iter_get_error(
      arg0,
      errptr,
    );
  }

  late final _leveldb_iter_get_error_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_iter_get_error>>(
          'leveldb_iter_get_error');
  late final _dart_leveldb_iter_get_error _leveldb_iter_get_error =
      _leveldb_iter_get_error_ptr.asFunction<_dart_leveldb_iter_get_error>();

  ffi.Pointer<leveldb_writebatch_t> leveldb_writebatch_create() {
    return _leveldb_writebatch_create();
  }

  late final _leveldb_writebatch_create_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_writebatch_create>>(
          'leveldb_writebatch_create');
  late final _dart_leveldb_writebatch_create _leveldb_writebatch_create =
      _leveldb_writebatch_create_ptr
          .asFunction<_dart_leveldb_writebatch_create>();

  void leveldb_writebatch_destroy(
    ffi.Pointer<leveldb_writebatch_t> arg0,
  ) {
    return _leveldb_writebatch_destroy(
      arg0,
    );
  }

  late final _leveldb_writebatch_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_writebatch_destroy>>(
          'leveldb_writebatch_destroy');
  late final _dart_leveldb_writebatch_destroy _leveldb_writebatch_destroy =
      _leveldb_writebatch_destroy_ptr
          .asFunction<_dart_leveldb_writebatch_destroy>();

  void leveldb_writebatch_clear(
    ffi.Pointer<leveldb_writebatch_t> arg0,
  ) {
    return _leveldb_writebatch_clear(
      arg0,
    );
  }

  late final _leveldb_writebatch_clear_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_writebatch_clear>>(
          'leveldb_writebatch_clear');
  late final _dart_leveldb_writebatch_clear _leveldb_writebatch_clear =
      _leveldb_writebatch_clear_ptr
          .asFunction<_dart_leveldb_writebatch_clear>();

  void leveldb_writebatch_put(
    ffi.Pointer<leveldb_writebatch_t> arg0,
    ffi.Pointer<ffi.Int8> key,
    int klen,
    ffi.Pointer<ffi.Int8> val,
    int vlen,
  ) {
    return _leveldb_writebatch_put(
      arg0,
      key,
      klen,
      val,
      vlen,
    );
  }

  late final _leveldb_writebatch_put_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_writebatch_put>>(
          'leveldb_writebatch_put');
  late final _dart_leveldb_writebatch_put _leveldb_writebatch_put =
      _leveldb_writebatch_put_ptr.asFunction<_dart_leveldb_writebatch_put>();

  void leveldb_writebatch_delete(
    ffi.Pointer<leveldb_writebatch_t> arg0,
    ffi.Pointer<ffi.Int8> key,
    int klen,
  ) {
    return _leveldb_writebatch_delete(
      arg0,
      key,
      klen,
    );
  }

  late final _leveldb_writebatch_delete_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_writebatch_delete>>(
          'leveldb_writebatch_delete');
  late final _dart_leveldb_writebatch_delete _leveldb_writebatch_delete =
      _leveldb_writebatch_delete_ptr
          .asFunction<_dart_leveldb_writebatch_delete>();

  void leveldb_writebatch_iterate(
    ffi.Pointer<leveldb_writebatch_t> arg0,
    ffi.Pointer<ffi.Void> state,
    ffi.Pointer<ffi.NativeFunction<_typedefC_2>> put,
    ffi.Pointer<ffi.NativeFunction<_typedefC_3>> deleted,
  ) {
    return _leveldb_writebatch_iterate(
      arg0,
      state,
      put,
      deleted,
    );
  }

  late final _leveldb_writebatch_iterate_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_writebatch_iterate>>(
          'leveldb_writebatch_iterate');
  late final _dart_leveldb_writebatch_iterate _leveldb_writebatch_iterate =
      _leveldb_writebatch_iterate_ptr
          .asFunction<_dart_leveldb_writebatch_iterate>();

  void leveldb_writebatch_append(
    ffi.Pointer<leveldb_writebatch_t> destination,
    ffi.Pointer<leveldb_writebatch_t> source,
  ) {
    return _leveldb_writebatch_append(
      destination,
      source,
    );
  }

  late final _leveldb_writebatch_append_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_writebatch_append>>(
          'leveldb_writebatch_append');
  late final _dart_leveldb_writebatch_append _leveldb_writebatch_append =
      _leveldb_writebatch_append_ptr
          .asFunction<_dart_leveldb_writebatch_append>();

  ffi.Pointer<leveldb_options_t> leveldb_options_create() {
    return _leveldb_options_create();
  }

  late final _leveldb_options_create_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_create>>(
          'leveldb_options_create');
  late final _dart_leveldb_options_create _leveldb_options_create =
      _leveldb_options_create_ptr.asFunction<_dart_leveldb_options_create>();

  void leveldb_options_destroy(
    ffi.Pointer<leveldb_options_t> arg0,
  ) {
    return _leveldb_options_destroy(
      arg0,
    );
  }

  late final _leveldb_options_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_destroy>>(
          'leveldb_options_destroy');
  late final _dart_leveldb_options_destroy _leveldb_options_destroy =
      _leveldb_options_destroy_ptr.asFunction<_dart_leveldb_options_destroy>();

  void leveldb_options_set_comparator(
    ffi.Pointer<leveldb_options_t> arg0,
    ffi.Pointer<leveldb_comparator_t> arg1,
  ) {
    return _leveldb_options_set_comparator(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_comparator_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_set_comparator>>(
          'leveldb_options_set_comparator');
  late final _dart_leveldb_options_set_comparator
      _leveldb_options_set_comparator = _leveldb_options_set_comparator_ptr
          .asFunction<_dart_leveldb_options_set_comparator>();

  void leveldb_options_set_filter_policy(
    ffi.Pointer<leveldb_options_t> arg0,
    ffi.Pointer<leveldb_filterpolicy_t> arg1,
  ) {
    return _leveldb_options_set_filter_policy(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_filter_policy_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_set_filter_policy>>(
          'leveldb_options_set_filter_policy');
  late final _dart_leveldb_options_set_filter_policy
      _leveldb_options_set_filter_policy =
      _leveldb_options_set_filter_policy_ptr
          .asFunction<_dart_leveldb_options_set_filter_policy>();

  void leveldb_options_set_create_if_missing(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_create_if_missing(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_create_if_missing_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_set_create_if_missing>>(
          'leveldb_options_set_create_if_missing');
  late final _dart_leveldb_options_set_create_if_missing
      _leveldb_options_set_create_if_missing =
      _leveldb_options_set_create_if_missing_ptr
          .asFunction<_dart_leveldb_options_set_create_if_missing>();

  void leveldb_options_set_error_if_exists(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_error_if_exists(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_error_if_exists_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_set_error_if_exists>>(
          'leveldb_options_set_error_if_exists');
  late final _dart_leveldb_options_set_error_if_exists
      _leveldb_options_set_error_if_exists =
      _leveldb_options_set_error_if_exists_ptr
          .asFunction<_dart_leveldb_options_set_error_if_exists>();

  void leveldb_options_set_paranoid_checks(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_paranoid_checks(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_paranoid_checks_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_set_paranoid_checks>>(
          'leveldb_options_set_paranoid_checks');
  late final _dart_leveldb_options_set_paranoid_checks
      _leveldb_options_set_paranoid_checks =
      _leveldb_options_set_paranoid_checks_ptr
          .asFunction<_dart_leveldb_options_set_paranoid_checks>();

  void leveldb_options_set_env(
    ffi.Pointer<leveldb_options_t> arg0,
    ffi.Pointer<leveldb_env_t> arg1,
  ) {
    return _leveldb_options_set_env(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_env_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_set_env>>(
          'leveldb_options_set_env');
  late final _dart_leveldb_options_set_env _leveldb_options_set_env =
      _leveldb_options_set_env_ptr.asFunction<_dart_leveldb_options_set_env>();

  void leveldb_options_set_info_log(
    ffi.Pointer<leveldb_options_t> arg0,
    ffi.Pointer<leveldb_logger_t> arg1,
  ) {
    return _leveldb_options_set_info_log(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_info_log_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_set_info_log>>(
          'leveldb_options_set_info_log');
  late final _dart_leveldb_options_set_info_log _leveldb_options_set_info_log =
      _leveldb_options_set_info_log_ptr
          .asFunction<_dart_leveldb_options_set_info_log>();

  void leveldb_options_set_write_buffer_size(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_write_buffer_size(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_write_buffer_size_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_set_write_buffer_size>>(
          'leveldb_options_set_write_buffer_size');
  late final _dart_leveldb_options_set_write_buffer_size
      _leveldb_options_set_write_buffer_size =
      _leveldb_options_set_write_buffer_size_ptr
          .asFunction<_dart_leveldb_options_set_write_buffer_size>();

  void leveldb_options_set_max_open_files(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_max_open_files(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_max_open_files_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_set_max_open_files>>(
          'leveldb_options_set_max_open_files');
  late final _dart_leveldb_options_set_max_open_files
      _leveldb_options_set_max_open_files =
      _leveldb_options_set_max_open_files_ptr
          .asFunction<_dart_leveldb_options_set_max_open_files>();

  void leveldb_options_set_cache(
    ffi.Pointer<leveldb_options_t> arg0,
    ffi.Pointer<leveldb_cache_t> arg1,
  ) {
    return _leveldb_options_set_cache(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_cache_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_set_cache>>(
          'leveldb_options_set_cache');
  late final _dart_leveldb_options_set_cache _leveldb_options_set_cache =
      _leveldb_options_set_cache_ptr
          .asFunction<_dart_leveldb_options_set_cache>();

  void leveldb_options_set_block_size(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_block_size(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_block_size_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_set_block_size>>(
          'leveldb_options_set_block_size');
  late final _dart_leveldb_options_set_block_size
      _leveldb_options_set_block_size = _leveldb_options_set_block_size_ptr
          .asFunction<_dart_leveldb_options_set_block_size>();

  void leveldb_options_set_block_restart_interval(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_block_restart_interval(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_block_restart_interval_ptr = _lookup<
          ffi.NativeFunction<_c_leveldb_options_set_block_restart_interval>>(
      'leveldb_options_set_block_restart_interval');
  late final _dart_leveldb_options_set_block_restart_interval
      _leveldb_options_set_block_restart_interval =
      _leveldb_options_set_block_restart_interval_ptr
          .asFunction<_dart_leveldb_options_set_block_restart_interval>();

  void leveldb_options_set_max_file_size(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_max_file_size(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_max_file_size_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_set_max_file_size>>(
          'leveldb_options_set_max_file_size');
  late final _dart_leveldb_options_set_max_file_size
      _leveldb_options_set_max_file_size =
      _leveldb_options_set_max_file_size_ptr
          .asFunction<_dart_leveldb_options_set_max_file_size>();

  void leveldb_options_set_compression(
    ffi.Pointer<leveldb_options_t> arg0,
    int arg1,
  ) {
    return _leveldb_options_set_compression(
      arg0,
      arg1,
    );
  }

  late final _leveldb_options_set_compression_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_options_set_compression>>(
          'leveldb_options_set_compression');
  late final _dart_leveldb_options_set_compression
      _leveldb_options_set_compression = _leveldb_options_set_compression_ptr
          .asFunction<_dart_leveldb_options_set_compression>();

  ffi.Pointer<leveldb_comparator_t> leveldb_comparator_create(
    ffi.Pointer<ffi.Void> state,
    ffi.Pointer<ffi.NativeFunction<_typedefC_4>> destructor,
    ffi.Pointer<ffi.NativeFunction<_typedefC_5>> compare,
    ffi.Pointer<ffi.NativeFunction<_typedefC_6>> name,
  ) {
    return _leveldb_comparator_create(
      state,
      destructor,
      compare,
      name,
    );
  }

  late final _leveldb_comparator_create_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_comparator_create>>(
          'leveldb_comparator_create');
  late final _dart_leveldb_comparator_create _leveldb_comparator_create =
      _leveldb_comparator_create_ptr
          .asFunction<_dart_leveldb_comparator_create>();

  void leveldb_comparator_destroy(
    ffi.Pointer<leveldb_comparator_t> arg0,
  ) {
    return _leveldb_comparator_destroy(
      arg0,
    );
  }

  late final _leveldb_comparator_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_comparator_destroy>>(
          'leveldb_comparator_destroy');
  late final _dart_leveldb_comparator_destroy _leveldb_comparator_destroy =
      _leveldb_comparator_destroy_ptr
          .asFunction<_dart_leveldb_comparator_destroy>();

  ffi.Pointer<leveldb_filterpolicy_t> leveldb_filterpolicy_create(
    ffi.Pointer<ffi.Void> state,
    ffi.Pointer<ffi.NativeFunction<_typedefC_7>> destructor,
    ffi.Pointer<ffi.NativeFunction<_typedefC_8>> create_filter,
    ffi.Pointer<ffi.NativeFunction<_typedefC_9>> key_may_match,
    ffi.Pointer<ffi.NativeFunction<_typedefC_10>> name,
  ) {
    return _leveldb_filterpolicy_create(
      state,
      destructor,
      create_filter,
      key_may_match,
      name,
    );
  }

  late final _leveldb_filterpolicy_create_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_filterpolicy_create>>(
          'leveldb_filterpolicy_create');
  late final _dart_leveldb_filterpolicy_create _leveldb_filterpolicy_create =
      _leveldb_filterpolicy_create_ptr
          .asFunction<_dart_leveldb_filterpolicy_create>();

  void leveldb_filterpolicy_destroy(
    ffi.Pointer<leveldb_filterpolicy_t> arg0,
  ) {
    return _leveldb_filterpolicy_destroy(
      arg0,
    );
  }

  late final _leveldb_filterpolicy_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_filterpolicy_destroy>>(
          'leveldb_filterpolicy_destroy');
  late final _dart_leveldb_filterpolicy_destroy _leveldb_filterpolicy_destroy =
      _leveldb_filterpolicy_destroy_ptr
          .asFunction<_dart_leveldb_filterpolicy_destroy>();

  ffi.Pointer<leveldb_filterpolicy_t> leveldb_filterpolicy_create_bloom(
    int bits_per_key,
  ) {
    return _leveldb_filterpolicy_create_bloom(
      bits_per_key,
    );
  }

  late final _leveldb_filterpolicy_create_bloom_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_filterpolicy_create_bloom>>(
          'leveldb_filterpolicy_create_bloom');
  late final _dart_leveldb_filterpolicy_create_bloom
      _leveldb_filterpolicy_create_bloom =
      _leveldb_filterpolicy_create_bloom_ptr
          .asFunction<_dart_leveldb_filterpolicy_create_bloom>();

  ffi.Pointer<leveldb_readoptions_t> leveldb_readoptions_create() {
    return _leveldb_readoptions_create();
  }

  late final _leveldb_readoptions_create_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_readoptions_create>>(
          'leveldb_readoptions_create');
  late final _dart_leveldb_readoptions_create _leveldb_readoptions_create =
      _leveldb_readoptions_create_ptr
          .asFunction<_dart_leveldb_readoptions_create>();

  void leveldb_readoptions_destroy(
    ffi.Pointer<leveldb_readoptions_t> arg0,
  ) {
    return _leveldb_readoptions_destroy(
      arg0,
    );
  }

  late final _leveldb_readoptions_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_readoptions_destroy>>(
          'leveldb_readoptions_destroy');
  late final _dart_leveldb_readoptions_destroy _leveldb_readoptions_destroy =
      _leveldb_readoptions_destroy_ptr
          .asFunction<_dart_leveldb_readoptions_destroy>();

  void leveldb_readoptions_set_verify_checksums(
    ffi.Pointer<leveldb_readoptions_t> arg0,
    int arg1,
  ) {
    return _leveldb_readoptions_set_verify_checksums(
      arg0,
      arg1,
    );
  }

  late final _leveldb_readoptions_set_verify_checksums_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_readoptions_set_verify_checksums>>(
          'leveldb_readoptions_set_verify_checksums');
  late final _dart_leveldb_readoptions_set_verify_checksums
      _leveldb_readoptions_set_verify_checksums =
      _leveldb_readoptions_set_verify_checksums_ptr
          .asFunction<_dart_leveldb_readoptions_set_verify_checksums>();

  void leveldb_readoptions_set_fill_cache(
    ffi.Pointer<leveldb_readoptions_t> arg0,
    int arg1,
  ) {
    return _leveldb_readoptions_set_fill_cache(
      arg0,
      arg1,
    );
  }

  late final _leveldb_readoptions_set_fill_cache_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_readoptions_set_fill_cache>>(
          'leveldb_readoptions_set_fill_cache');
  late final _dart_leveldb_readoptions_set_fill_cache
      _leveldb_readoptions_set_fill_cache =
      _leveldb_readoptions_set_fill_cache_ptr
          .asFunction<_dart_leveldb_readoptions_set_fill_cache>();

  void leveldb_readoptions_set_snapshot(
    ffi.Pointer<leveldb_readoptions_t> arg0,
    ffi.Pointer<leveldb_snapshot_t> arg1,
  ) {
    return _leveldb_readoptions_set_snapshot(
      arg0,
      arg1,
    );
  }

  late final _leveldb_readoptions_set_snapshot_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_readoptions_set_snapshot>>(
          'leveldb_readoptions_set_snapshot');
  late final _dart_leveldb_readoptions_set_snapshot
      _leveldb_readoptions_set_snapshot = _leveldb_readoptions_set_snapshot_ptr
          .asFunction<_dart_leveldb_readoptions_set_snapshot>();

  ffi.Pointer<leveldb_writeoptions_t> leveldb_writeoptions_create() {
    return _leveldb_writeoptions_create();
  }

  late final _leveldb_writeoptions_create_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_writeoptions_create>>(
          'leveldb_writeoptions_create');
  late final _dart_leveldb_writeoptions_create _leveldb_writeoptions_create =
      _leveldb_writeoptions_create_ptr
          .asFunction<_dart_leveldb_writeoptions_create>();

  void leveldb_writeoptions_destroy(
    ffi.Pointer<leveldb_writeoptions_t> arg0,
  ) {
    return _leveldb_writeoptions_destroy(
      arg0,
    );
  }

  late final _leveldb_writeoptions_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_writeoptions_destroy>>(
          'leveldb_writeoptions_destroy');
  late final _dart_leveldb_writeoptions_destroy _leveldb_writeoptions_destroy =
      _leveldb_writeoptions_destroy_ptr
          .asFunction<_dart_leveldb_writeoptions_destroy>();

  void leveldb_writeoptions_set_sync(
    ffi.Pointer<leveldb_writeoptions_t> arg0,
    int arg1,
  ) {
    return _leveldb_writeoptions_set_sync(
      arg0,
      arg1,
    );
  }

  late final _leveldb_writeoptions_set_sync_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_writeoptions_set_sync>>(
          'leveldb_writeoptions_set_sync');
  late final _dart_leveldb_writeoptions_set_sync
      _leveldb_writeoptions_set_sync = _leveldb_writeoptions_set_sync_ptr
          .asFunction<_dart_leveldb_writeoptions_set_sync>();

  ffi.Pointer<leveldb_cache_t> leveldb_cache_create_lru(
    int capacity,
  ) {
    return _leveldb_cache_create_lru(
      capacity,
    );
  }

  late final _leveldb_cache_create_lru_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_cache_create_lru>>(
          'leveldb_cache_create_lru');
  late final _dart_leveldb_cache_create_lru _leveldb_cache_create_lru =
      _leveldb_cache_create_lru_ptr
          .asFunction<_dart_leveldb_cache_create_lru>();

  void leveldb_cache_destroy(
    ffi.Pointer<leveldb_cache_t> cache,
  ) {
    return _leveldb_cache_destroy(
      cache,
    );
  }

  late final _leveldb_cache_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_cache_destroy>>(
          'leveldb_cache_destroy');
  late final _dart_leveldb_cache_destroy _leveldb_cache_destroy =
      _leveldb_cache_destroy_ptr.asFunction<_dart_leveldb_cache_destroy>();

  ffi.Pointer<leveldb_env_t> leveldb_create_default_env() {
    return _leveldb_create_default_env();
  }

  late final _leveldb_create_default_env_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_create_default_env>>(
          'leveldb_create_default_env');
  late final _dart_leveldb_create_default_env _leveldb_create_default_env =
      _leveldb_create_default_env_ptr
          .asFunction<_dart_leveldb_create_default_env>();

  void leveldb_env_destroy(
    ffi.Pointer<leveldb_env_t> arg0,
  ) {
    return _leveldb_env_destroy(
      arg0,
    );
  }

  late final _leveldb_env_destroy_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_env_destroy>>(
          'leveldb_env_destroy');
  late final _dart_leveldb_env_destroy _leveldb_env_destroy =
      _leveldb_env_destroy_ptr.asFunction<_dart_leveldb_env_destroy>();

  ffi.Pointer<ffi.Int8> leveldb_env_get_test_directory(
    ffi.Pointer<leveldb_env_t> arg0,
  ) {
    return _leveldb_env_get_test_directory(
      arg0,
    );
  }

  late final _leveldb_env_get_test_directory_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_env_get_test_directory>>(
          'leveldb_env_get_test_directory');
  late final _dart_leveldb_env_get_test_directory
      _leveldb_env_get_test_directory = _leveldb_env_get_test_directory_ptr
          .asFunction<_dart_leveldb_env_get_test_directory>();

  void leveldb_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _leveldb_free(
      ptr,
    );
  }

  late final _leveldb_free_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_free>>('leveldb_free');
  late final _dart_leveldb_free _leveldb_free =
      _leveldb_free_ptr.asFunction<_dart_leveldb_free>();

  int leveldb_major_version() {
    return _leveldb_major_version();
  }

  late final _leveldb_major_version_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_major_version>>(
          'leveldb_major_version');
  late final _dart_leveldb_major_version _leveldb_major_version =
      _leveldb_major_version_ptr.asFunction<_dart_leveldb_major_version>();

  int leveldb_minor_version() {
    return _leveldb_minor_version();
  }

  late final _leveldb_minor_version_ptr =
      _lookup<ffi.NativeFunction<_c_leveldb_minor_version>>(
          'leveldb_minor_version');
  late final _dart_leveldb_minor_version _leveldb_minor_version =
      _leveldb_minor_version_ptr.asFunction<_dart_leveldb_minor_version>();
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Opaque {}

class _opaque_pthread_cond_t extends ffi.Opaque {}

class _opaque_pthread_condattr_t extends ffi.Opaque {}

class _opaque_pthread_mutex_t extends ffi.Opaque {}

class _opaque_pthread_mutexattr_t extends ffi.Opaque {}

class _opaque_pthread_once_t extends ffi.Opaque {}

class _opaque_pthread_rwlock_t extends ffi.Opaque {}

class _opaque_pthread_rwlockattr_t extends ffi.Opaque {}

class _opaque_pthread_t extends ffi.Opaque {}

class leveldb_t extends ffi.Opaque {}

class leveldb_cache_t extends ffi.Opaque {}

class leveldb_comparator_t extends ffi.Opaque {}

class leveldb_env_t extends ffi.Opaque {}

class leveldb_filelock_t extends ffi.Opaque {}

class leveldb_filterpolicy_t extends ffi.Opaque {}

class leveldb_iterator_t extends ffi.Opaque {}

class leveldb_logger_t extends ffi.Opaque {}

class leveldb_options_t extends ffi.Opaque {}

class leveldb_randomfile_t extends ffi.Opaque {}

class leveldb_readoptions_t extends ffi.Opaque {}

class leveldb_seqfile_t extends ffi.Opaque {}

class leveldb_snapshot_t extends ffi.Opaque {}

class leveldb_writablefile_t extends ffi.Opaque {}

class leveldb_writebatch_t extends ffi.Opaque {}

class leveldb_writeoptions_t extends ffi.Opaque {}

const int leveldb_no_compression = 0;

const int leveldb_snappy_compression = 1;

const int __GNUC_VA_LIST = 1;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

typedef _c_leveldb_open = ffi.Pointer<leveldb_t> Function(
  ffi.Pointer<leveldb_options_t> options,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _dart_leveldb_open = ffi.Pointer<leveldb_t> Function(
  ffi.Pointer<leveldb_options_t> options,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _c_leveldb_close = ffi.Void Function(
  ffi.Pointer<leveldb_t> db,
);

typedef _dart_leveldb_close = void Function(
  ffi.Pointer<leveldb_t> db,
);

typedef _c_leveldb_put = ffi.Void Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<leveldb_writeoptions_t> options,
  ffi.Pointer<ffi.Int8> key,
  ffi.Uint64 keylen,
  ffi.Pointer<ffi.Int8> val,
  ffi.Uint64 vallen,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _dart_leveldb_put = void Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<leveldb_writeoptions_t> options,
  ffi.Pointer<ffi.Int8> key,
  int keylen,
  ffi.Pointer<ffi.Int8> val,
  int vallen,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _c_leveldb_delete = ffi.Void Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<leveldb_writeoptions_t> options,
  ffi.Pointer<ffi.Int8> key,
  ffi.Uint64 keylen,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _dart_leveldb_delete = void Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<leveldb_writeoptions_t> options,
  ffi.Pointer<ffi.Int8> key,
  int keylen,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _c_leveldb_write = ffi.Void Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<leveldb_writeoptions_t> options,
  ffi.Pointer<leveldb_writebatch_t> batch,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _dart_leveldb_write = void Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<leveldb_writeoptions_t> options,
  ffi.Pointer<leveldb_writebatch_t> batch,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _c_leveldb_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<leveldb_readoptions_t> options,
  ffi.Pointer<ffi.Int8> key,
  ffi.Uint64 keylen,
  ffi.Pointer<ffi.Uint64> vallen,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _dart_leveldb_get = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<leveldb_readoptions_t> options,
  ffi.Pointer<ffi.Int8> key,
  int keylen,
  ffi.Pointer<ffi.Uint64> vallen,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _c_leveldb_create_iterator = ffi.Pointer<leveldb_iterator_t> Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<leveldb_readoptions_t> options,
);

typedef _dart_leveldb_create_iterator = ffi.Pointer<leveldb_iterator_t>
    Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<leveldb_readoptions_t> options,
);

typedef _c_leveldb_create_snapshot = ffi.Pointer<leveldb_snapshot_t> Function(
  ffi.Pointer<leveldb_t> db,
);

typedef _dart_leveldb_create_snapshot = ffi.Pointer<leveldb_snapshot_t>
    Function(
  ffi.Pointer<leveldb_t> db,
);

typedef _c_leveldb_release_snapshot = ffi.Void Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<leveldb_snapshot_t> snapshot,
);

typedef _dart_leveldb_release_snapshot = void Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<leveldb_snapshot_t> snapshot,
);

typedef _c_leveldb_property_value = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<ffi.Int8> propname,
);

typedef _dart_leveldb_property_value = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<ffi.Int8> propname,
);

typedef _c_leveldb_approximate_sizes = ffi.Void Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Int32 num_ranges,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> range_start_key,
  ffi.Pointer<ffi.Uint64> range_start_key_len,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> range_limit_key,
  ffi.Pointer<ffi.Uint64> range_limit_key_len,
  ffi.Pointer<ffi.Uint64> sizes,
);

typedef _dart_leveldb_approximate_sizes = void Function(
  ffi.Pointer<leveldb_t> db,
  int num_ranges,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> range_start_key,
  ffi.Pointer<ffi.Uint64> range_start_key_len,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> range_limit_key,
  ffi.Pointer<ffi.Uint64> range_limit_key_len,
  ffi.Pointer<ffi.Uint64> sizes,
);

typedef _c_leveldb_compact_range = ffi.Void Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<ffi.Int8> start_key,
  ffi.Uint64 start_key_len,
  ffi.Pointer<ffi.Int8> limit_key,
  ffi.Uint64 limit_key_len,
);

typedef _dart_leveldb_compact_range = void Function(
  ffi.Pointer<leveldb_t> db,
  ffi.Pointer<ffi.Int8> start_key,
  int start_key_len,
  ffi.Pointer<ffi.Int8> limit_key,
  int limit_key_len,
);

typedef _c_leveldb_destroy_db = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> options,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _dart_leveldb_destroy_db = void Function(
  ffi.Pointer<leveldb_options_t> options,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _c_leveldb_repair_db = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> options,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _dart_leveldb_repair_db = void Function(
  ffi.Pointer<leveldb_options_t> options,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _c_leveldb_iter_destroy = ffi.Void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
);

typedef _dart_leveldb_iter_destroy = void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
);

typedef _c_leveldb_iter_valid = ffi.Uint8 Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
);

typedef _dart_leveldb_iter_valid = int Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
);

typedef _c_leveldb_iter_seek_to_first = ffi.Void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
);

typedef _dart_leveldb_iter_seek_to_first = void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
);

typedef _c_leveldb_iter_seek_to_last = ffi.Void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
);

typedef _dart_leveldb_iter_seek_to_last = void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
);

typedef _c_leveldb_iter_seek = ffi.Void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
  ffi.Pointer<ffi.Int8> k,
  ffi.Uint64 klen,
);

typedef _dart_leveldb_iter_seek = void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
  ffi.Pointer<ffi.Int8> k,
  int klen,
);

typedef _c_leveldb_iter_next = ffi.Void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
);

typedef _dart_leveldb_iter_next = void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
);

typedef _c_leveldb_iter_prev = ffi.Void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
);

typedef _dart_leveldb_iter_prev = void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
);

typedef _c_leveldb_iter_key = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
  ffi.Pointer<ffi.Uint64> klen,
);

typedef _dart_leveldb_iter_key = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
  ffi.Pointer<ffi.Uint64> klen,
);

typedef _c_leveldb_iter_value = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
  ffi.Pointer<ffi.Uint64> vlen,
);

typedef _dart_leveldb_iter_value = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
  ffi.Pointer<ffi.Uint64> vlen,
);

typedef _c_leveldb_iter_get_error = ffi.Void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _dart_leveldb_iter_get_error = void Function(
  ffi.Pointer<leveldb_iterator_t> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> errptr,
);

typedef _c_leveldb_writebatch_create = ffi.Pointer<leveldb_writebatch_t>
    Function();

typedef _dart_leveldb_writebatch_create = ffi.Pointer<leveldb_writebatch_t>
    Function();

typedef _c_leveldb_writebatch_destroy = ffi.Void Function(
  ffi.Pointer<leveldb_writebatch_t> arg0,
);

typedef _dart_leveldb_writebatch_destroy = void Function(
  ffi.Pointer<leveldb_writebatch_t> arg0,
);

typedef _c_leveldb_writebatch_clear = ffi.Void Function(
  ffi.Pointer<leveldb_writebatch_t> arg0,
);

typedef _dart_leveldb_writebatch_clear = void Function(
  ffi.Pointer<leveldb_writebatch_t> arg0,
);

typedef _c_leveldb_writebatch_put = ffi.Void Function(
  ffi.Pointer<leveldb_writebatch_t> arg0,
  ffi.Pointer<ffi.Int8> key,
  ffi.Uint64 klen,
  ffi.Pointer<ffi.Int8> val,
  ffi.Uint64 vlen,
);

typedef _dart_leveldb_writebatch_put = void Function(
  ffi.Pointer<leveldb_writebatch_t> arg0,
  ffi.Pointer<ffi.Int8> key,
  int klen,
  ffi.Pointer<ffi.Int8> val,
  int vlen,
);

typedef _c_leveldb_writebatch_delete = ffi.Void Function(
  ffi.Pointer<leveldb_writebatch_t> arg0,
  ffi.Pointer<ffi.Int8> key,
  ffi.Uint64 klen,
);

typedef _dart_leveldb_writebatch_delete = void Function(
  ffi.Pointer<leveldb_writebatch_t> arg0,
  ffi.Pointer<ffi.Int8> key,
  int klen,
);

typedef _typedefC_2 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
);

typedef _c_leveldb_writebatch_iterate = ffi.Void Function(
  ffi.Pointer<leveldb_writebatch_t> arg0,
  ffi.Pointer<ffi.Void> state,
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> put,
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> deleted,
);

typedef _dart_leveldb_writebatch_iterate = void Function(
  ffi.Pointer<leveldb_writebatch_t> arg0,
  ffi.Pointer<ffi.Void> state,
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> put,
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> deleted,
);

typedef _c_leveldb_writebatch_append = ffi.Void Function(
  ffi.Pointer<leveldb_writebatch_t> destination,
  ffi.Pointer<leveldb_writebatch_t> source,
);

typedef _dart_leveldb_writebatch_append = void Function(
  ffi.Pointer<leveldb_writebatch_t> destination,
  ffi.Pointer<leveldb_writebatch_t> source,
);

typedef _c_leveldb_options_create = ffi.Pointer<leveldb_options_t> Function();

typedef _dart_leveldb_options_create = ffi.Pointer<leveldb_options_t>
    Function();

typedef _c_leveldb_options_destroy = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
);

typedef _dart_leveldb_options_destroy = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
);

typedef _c_leveldb_options_set_comparator = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Pointer<leveldb_comparator_t> arg1,
);

typedef _dart_leveldb_options_set_comparator = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Pointer<leveldb_comparator_t> arg1,
);

typedef _c_leveldb_options_set_filter_policy = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Pointer<leveldb_filterpolicy_t> arg1,
);

typedef _dart_leveldb_options_set_filter_policy = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Pointer<leveldb_filterpolicy_t> arg1,
);

typedef _c_leveldb_options_set_create_if_missing = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Uint8 arg1,
);

typedef _dart_leveldb_options_set_create_if_missing = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  int arg1,
);

typedef _c_leveldb_options_set_error_if_exists = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Uint8 arg1,
);

typedef _dart_leveldb_options_set_error_if_exists = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  int arg1,
);

typedef _c_leveldb_options_set_paranoid_checks = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Uint8 arg1,
);

typedef _dart_leveldb_options_set_paranoid_checks = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  int arg1,
);

typedef _c_leveldb_options_set_env = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Pointer<leveldb_env_t> arg1,
);

typedef _dart_leveldb_options_set_env = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Pointer<leveldb_env_t> arg1,
);

typedef _c_leveldb_options_set_info_log = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Pointer<leveldb_logger_t> arg1,
);

typedef _dart_leveldb_options_set_info_log = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Pointer<leveldb_logger_t> arg1,
);

typedef _c_leveldb_options_set_write_buffer_size = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_leveldb_options_set_write_buffer_size = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  int arg1,
);

typedef _c_leveldb_options_set_max_open_files = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_leveldb_options_set_max_open_files = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  int arg1,
);

typedef _c_leveldb_options_set_cache = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Pointer<leveldb_cache_t> arg1,
);

typedef _dart_leveldb_options_set_cache = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Pointer<leveldb_cache_t> arg1,
);

typedef _c_leveldb_options_set_block_size = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_leveldb_options_set_block_size = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  int arg1,
);

typedef _c_leveldb_options_set_block_restart_interval = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_leveldb_options_set_block_restart_interval = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  int arg1,
);

typedef _c_leveldb_options_set_max_file_size = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_leveldb_options_set_max_file_size = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  int arg1,
);

typedef _c_leveldb_options_set_compression = ffi.Void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_leveldb_options_set_compression = void Function(
  ffi.Pointer<leveldb_options_t> arg0,
  int arg1,
);

typedef _typedefC_4 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_5 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
);

typedef _typedefC_6 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_leveldb_comparator_create = ffi.Pointer<leveldb_comparator_t>
    Function(
  ffi.Pointer<ffi.Void> state,
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> destructor,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> compare,
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> name,
);

typedef _dart_leveldb_comparator_create = ffi.Pointer<leveldb_comparator_t>
    Function(
  ffi.Pointer<ffi.Void> state,
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> destructor,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> compare,
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> name,
);

typedef _c_leveldb_comparator_destroy = ffi.Void Function(
  ffi.Pointer<leveldb_comparator_t> arg0,
);

typedef _dart_leveldb_comparator_destroy = void Function(
  ffi.Pointer<leveldb_comparator_t> arg0,
);

typedef _typedefC_7 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_8 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
  ffi.Pointer<ffi.Uint64>,
  ffi.Int32,
  ffi.Pointer<ffi.Uint64>,
);

typedef _typedefC_9 = ffi.Uint8 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
  ffi.Pointer<ffi.Int8>,
  ffi.Uint64,
);

typedef _typedefC_10 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_leveldb_filterpolicy_create = ffi.Pointer<leveldb_filterpolicy_t>
    Function(
  ffi.Pointer<ffi.Void> state,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> destructor,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> create_filter,
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> key_may_match,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> name,
);

typedef _dart_leveldb_filterpolicy_create = ffi.Pointer<leveldb_filterpolicy_t>
    Function(
  ffi.Pointer<ffi.Void> state,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> destructor,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> create_filter,
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> key_may_match,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> name,
);

typedef _c_leveldb_filterpolicy_destroy = ffi.Void Function(
  ffi.Pointer<leveldb_filterpolicy_t> arg0,
);

typedef _dart_leveldb_filterpolicy_destroy = void Function(
  ffi.Pointer<leveldb_filterpolicy_t> arg0,
);

typedef _c_leveldb_filterpolicy_create_bloom
    = ffi.Pointer<leveldb_filterpolicy_t> Function(
  ffi.Int32 bits_per_key,
);

typedef _dart_leveldb_filterpolicy_create_bloom
    = ffi.Pointer<leveldb_filterpolicy_t> Function(
  int bits_per_key,
);

typedef _c_leveldb_readoptions_create = ffi.Pointer<leveldb_readoptions_t>
    Function();

typedef _dart_leveldb_readoptions_create = ffi.Pointer<leveldb_readoptions_t>
    Function();

typedef _c_leveldb_readoptions_destroy = ffi.Void Function(
  ffi.Pointer<leveldb_readoptions_t> arg0,
);

typedef _dart_leveldb_readoptions_destroy = void Function(
  ffi.Pointer<leveldb_readoptions_t> arg0,
);

typedef _c_leveldb_readoptions_set_verify_checksums = ffi.Void Function(
  ffi.Pointer<leveldb_readoptions_t> arg0,
  ffi.Uint8 arg1,
);

typedef _dart_leveldb_readoptions_set_verify_checksums = void Function(
  ffi.Pointer<leveldb_readoptions_t> arg0,
  int arg1,
);

typedef _c_leveldb_readoptions_set_fill_cache = ffi.Void Function(
  ffi.Pointer<leveldb_readoptions_t> arg0,
  ffi.Uint8 arg1,
);

typedef _dart_leveldb_readoptions_set_fill_cache = void Function(
  ffi.Pointer<leveldb_readoptions_t> arg0,
  int arg1,
);

typedef _c_leveldb_readoptions_set_snapshot = ffi.Void Function(
  ffi.Pointer<leveldb_readoptions_t> arg0,
  ffi.Pointer<leveldb_snapshot_t> arg1,
);

typedef _dart_leveldb_readoptions_set_snapshot = void Function(
  ffi.Pointer<leveldb_readoptions_t> arg0,
  ffi.Pointer<leveldb_snapshot_t> arg1,
);

typedef _c_leveldb_writeoptions_create = ffi.Pointer<leveldb_writeoptions_t>
    Function();

typedef _dart_leveldb_writeoptions_create = ffi.Pointer<leveldb_writeoptions_t>
    Function();

typedef _c_leveldb_writeoptions_destroy = ffi.Void Function(
  ffi.Pointer<leveldb_writeoptions_t> arg0,
);

typedef _dart_leveldb_writeoptions_destroy = void Function(
  ffi.Pointer<leveldb_writeoptions_t> arg0,
);

typedef _c_leveldb_writeoptions_set_sync = ffi.Void Function(
  ffi.Pointer<leveldb_writeoptions_t> arg0,
  ffi.Uint8 arg1,
);

typedef _dart_leveldb_writeoptions_set_sync = void Function(
  ffi.Pointer<leveldb_writeoptions_t> arg0,
  int arg1,
);

typedef _c_leveldb_cache_create_lru = ffi.Pointer<leveldb_cache_t> Function(
  ffi.Uint64 capacity,
);

typedef _dart_leveldb_cache_create_lru = ffi.Pointer<leveldb_cache_t> Function(
  int capacity,
);

typedef _c_leveldb_cache_destroy = ffi.Void Function(
  ffi.Pointer<leveldb_cache_t> cache,
);

typedef _dart_leveldb_cache_destroy = void Function(
  ffi.Pointer<leveldb_cache_t> cache,
);

typedef _c_leveldb_create_default_env = ffi.Pointer<leveldb_env_t> Function();

typedef _dart_leveldb_create_default_env = ffi.Pointer<leveldb_env_t>
    Function();

typedef _c_leveldb_env_destroy = ffi.Void Function(
  ffi.Pointer<leveldb_env_t> arg0,
);

typedef _dart_leveldb_env_destroy = void Function(
  ffi.Pointer<leveldb_env_t> arg0,
);

typedef _c_leveldb_env_get_test_directory = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<leveldb_env_t> arg0,
);

typedef _dart_leveldb_env_get_test_directory = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<leveldb_env_t> arg0,
);

typedef _c_leveldb_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_leveldb_free = void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_leveldb_major_version = ffi.Int32 Function();

typedef _dart_leveldb_major_version = int Function();

typedef _c_leveldb_minor_version = ffi.Int32 Function();

typedef _dart_leveldb_minor_version = int Function();

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
